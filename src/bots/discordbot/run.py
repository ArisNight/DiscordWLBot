import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput
import sqlite3
from mcrcon import MCRcon
from mcrcon import MCRconException
import config
import asyncio
import os
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

intents = discord.Intents.default()
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        discord_id INTEGER NOT NULL,
        minecraft_nickname TEXT NOT NULL UNIQUE,
        age TEXT,
        how_found TEXT,
        interests TEXT,
        about TEXT,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        processed_at TIMESTAMP,
        processed_by TEXT
    )
    ''')
    conn.commit()
    conn.close()

init_db()

class ApplicationForm(Modal, title='–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.minecraft_nickname = TextInput(
            label='–í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft',
            placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∏–≥—Ä–µ',
            required=True,
            max_length=16
        )
        self.age = TextInput(
            label='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç',
            placeholder='–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?',
            required=True,
            max_length=3
        )
        self.how_found = TextInput(
            label='–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ?',
            placeholder='–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ?',
            required=True,
            max_length=100
        )
        self.interests = TextInput(
            label='–ß–µ–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?',
            placeholder='–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ?',
            required=True,
            max_length=100
        )
        self.about = TextInput(
            label='–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ',
            placeholder='–ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ',
            required=True,
            style=discord.TextStyle.long,
            max_length=4096
        )
        self.add_item(self.minecraft_nickname)
        self.add_item(self.age)
        self.add_item(self.how_found)
        self.add_item(self.interests)
        self.add_item(self.about)
    
    async def on_submit(self, interaction: discord.Interaction):
        if check_nickname_exists(self.minecraft_nickname.value):
            await interaction.response.send_message(
                f"‚ùå –ù–∏–∫–Ω–µ–π–º `{self.minecraft_nickname.value}` —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                ephemeral=True
            )
            return
        
        success = add_user_to_db(
            discord_id=interaction.user.id,
            minecraft_nickname=self.minecraft_nickname.value,
            age=self.age.value,
            how_found=self.how_found.value,
            interests=self.interests.value,
            about=self.about.value
        )
        
        if not success:
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )
            return
        
        applications_channel = bot.get_channel(config.ADMIN_CHANNEL)
        
        if applications_channel:
            embed = discord.Embed(
                title='üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞',
                description=f'–ò–≥—Ä–æ–∫ {interaction.user.mention} (`{interaction.user}`) –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É',
                color=discord.Color.blue()
            )
            
            embed.add_field(name="–ù–∏–∫ –≤ Minecraft", value=self.minecraft_nickname.value, inline=False)
            embed.add_field(name="–í–æ–∑—Ä–∞—Å—Ç", value=self.age.value, inline=True)
            embed.add_field(name="–£–∑–Ω–∞–ª –æ –ø—Ä–æ–µ–∫—Ç–µ", value=self.how_found.value, inline=True)
            embed.add_field(name="–ò–Ω—Ç–µ—Ä–µ—Å—ã", value=self.interests.value, inline=False)
            embed.add_field(name="–û —Å–µ–±–µ", value=self.about.value, inline=False)
            
            embed.set_footer(text=f"UserID: {interaction.user.id} | –ù–∏–∫: {self.minecraft_nickname.value} | {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            
            message = await applications_channel.send(embed=embed)
            await message.add_reaction('‚úÖ')
            await message.add_reaction('‚ùå')
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.  –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.",
                ephemeral=True
            )

def check_nickname_exists(nickname):
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM users WHERE minecraft_nickname = ?', (nickname,))
    exists = cursor.fetchone() is not None
    conn.close()
    return exists

def add_user_to_db(discord_id, minecraft_nickname, age, how_found, interests, about):
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    try:
        cursor.execute('''
        INSERT INTO users (discord_id, minecraft_nickname, age, how_found, interests, about)
        VALUES (?, ?, ?, ?, ?, ?)
        ''', (discord_id, minecraft_nickname, age, how_found, interests, about))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def update_user_status(minecraft_nickname, status, processed_by):
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
    UPDATE users 
    SET status = ?, processed_at = ?, processed_by = ?
    WHERE minecraft_nickname = ?
    ''', (status, datetime.now(), processed_by, minecraft_nickname))
    conn.commit()
    conn.close()

async def send_rcon_command(command):
    try:
        with MCRcon(config.HOST, config.PASSWD, port=config.PORT) as mcr:
            resp = mcr.command(command)
            logging.info(f"RCON command '{command}' executed successfully.")
            return resp
    except ConnectionRefusedError as e:
        logging.error(f"RCON connection refused: {e}")
        return None
    except MCRconException as e:
        logging.error(f"RCON error: {e}")
        return None
    except Exception as e:
        logging.exception(f"Unexpected RCON error: {e}")
        return None

@bot.event
async def on_ready():
    print(f'–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∫–∞–∫ {bot.user.name}')
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
        channel = bot.get_channel(config.ADMIN_CHANNEL)
        if channel:
            print(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {channel.name}")
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞: {config.ADMIN_CHANNEL}")

    except Exception as e:
        print(e)

@bot.tree.command(name="apply", description="–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏")
async def apply_command(interaction: discord.Interaction):
    await interaction.response.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏:", view=ApplyButtonView(), ephemeral=True)

class ApplyButtonView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", style=discord.ButtonStyle.primary, custom_id="apply_button")
    async def apply_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(ApplicationForm())

@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    if reaction.emoji in ['‚úÖ', '‚ùå']:
        if reaction.message.channel.id != config.ADMIN_CHANNEL:
            return

        if not reaction.message.embeds:
            return

        embed = reaction.message.embeds[0]
        if not embed.footer.text:
            return

        try:
            footer_data = embed.footer.text.split(' | ')
            user_id = int(footer_data[0].split('UserID: ')[1])
            nickname = footer_data[1].split('–ù–∏–∫: ')[1]
        except (IndexError, ValueError):
            return

        author = await bot.fetch_user(user_id)

        if reaction.emoji == '‚úÖ':
            # Retry mechanism
            max_retries = 3
            for attempt in range(max_retries):
                rcon_response = await send_rcon_command(f"whitelist add {nickname}")

                if rcon_response is not None:
                    update_user_status(nickname, 'approved', str(user))

                    embed = discord.Embed(
                        title="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä!",
                        description=(
                            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {nickname}!\n\n"
                            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ **–æ–¥–æ–±—Ä–µ–Ω–∞** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É!\n\n"
                            f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {user.mention}\n"
                            "**–î–∞—Ç–∞:** " + datetime.now().strftime('%Y-%m-%d %H:%M')
                        ),
                        color=discord.Color.green()
                    )
                    await author.send(embed=embed)
                    break  # Exit the retry loop on success
                else:
                    logging.warning(f"RCON failed for {nickname} (attempt {attempt + 1}/{max_retries}).")
                    if attempt < max_retries - 1:
                        await asyncio.sleep(2)  # Wait before retrying
            else:
                await user.send(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {nickname} –≤ –≤–∞–π—Ç–ª–∏—Å—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ RCON —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.")

        elif reaction.emoji == '‚ùå':
            update_user_status(nickname, 'rejected', str(user))

            embed = discord.Embed(
                title="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description=(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n\n"
                    f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** {user.mention}\n"
                    "**–î–∞—Ç–∞:** " + datetime.now().strftime('%Y-%m-%d %H:%M') + "\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                ),
                color=discord.Color.red()
            )
            await author.send(embed=embed)

        await reaction.message.delete()

@bot.tree.command(name="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–∏–∫—É")
@app_commands.describe(nickname='–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
@app_commands.checks.has_permissions(administrator=True)
async def check_command(interaction: discord.Interaction, nickname: str):
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
    SELECT discord_id, minecraft_nickname, status, created_at, processed_at, processed_by
    FROM users WHERE minecraft_nickname = ?
    ''', (nickname,))
    user_data = cursor.fetchone()
    conn.close()
    
    if not user_data:
        await interaction.response.send_message(f"–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)
        return
    
    discord_id, mc_nick, status, created_at, processed_at, processed_by = user_data
    
    embed = discord.Embed(
        title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ {mc_nick}",
        color=discord.Color.blue()
    )
    
    embed.add_field(name="Discord ID", value=discord_id, inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status, inline=True)
    embed.add_field(name="–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏", value=created_at, inline=False)
    
    if processed_at:
        embed.add_field(name="–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", value=processed_at, inline=True)
        embed.add_field(name="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", value=processed_by, inline=True)
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

def delete_user_data(nickname):
    db_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'users.db')
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM users WHERE minecraft_nickname = ?", (nickname,))
        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        conn.close()

@bot.tree.command(name="rnick", description="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∏–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
@app_commands.describe(nickname="–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
@app_commands.checks.has_permissions(administrator=True)
async def rnick_command(interaction: discord.Interaction, nickname: str):
    if delete_user_data(nickname):
        await interaction.response.send_message(f"–î–∞–Ω–Ω—ã–µ –æ –Ω–∏–∫–µ `{nickname}` –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", ephemeral=True)
    else:
        await interaction.response.send_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∏–∫–µ `{nickname}`.", ephemeral=True)

bot.run(config.DIS_TOKEN)
